from os import unlink

from utils import config, logger
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart
from search_engine.engine import ResultFetcher
from pathlib import Path

dp = Dispatcher()

class SearchDialog(StatesGroup):
    topic = State()

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search"))
    text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∏—Å–∫–∞—Ç—å –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏ üìö –∏ Fandom üéÆ (–¥–ª—è –∏–≥—Ä) "
        "–ª—é–±—É—é —Å—Ç–∞—Ç—å—é, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –Ω–∞–ø–∏—à–µ—à—å! –î–∞–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º üá∑üá∫\n"
        "–ü–æ–∏—Å–∫ –≤—Å–µ–≥–¥–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üîé\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/search ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–∏—Å–∫"
    )
    await message.answer(text, reply_markup=kb.as_markup())

@dp.callback_query(F.data == "start_search")
async def start_search(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û–∫–µ–π, –≤–≤–µ–¥–∏ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchDialog.topic)
    await callback.answer()

@dp.message(F.text == "/search")
async def search(message: types.Message, state: FSMContext):
    await message.answer("–û–∫–µ–π, –≤–≤–µ–¥–∏ —Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchDialog.topic)

@dp.message(SearchDialog.topic)
async def process_topic(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç, —Ä–∞–±–æ—Ç–∞—é...")
    topic = message.text
    fetcher = ResultFetcher(topic)
    fetcher.set_theme(topic)
    answer = None
    try:
        answer = fetcher.get()
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ ({e}) –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    logger.log("DEBUG", f"Answer: {answer}")

    if isinstance(answer, list) and all(isinstance(p, Path) for p in answer):
        logger.log("DEBUG", f"Answer: {answer}")
        for file in answer:
            if file.exists():
                await message.answer_document(FSInputFile(file))
        fetcher.cleanup()
        await state.clear()

    elif isinstance(answer, list):
        for i in range(0, len(answer[0]), 4096):
            await message.answer(answer[0][i:i + 4096])
        with open(f"search_result_{message.from_user.id}.txt", "w", encoding="utf-8") as file:
            file.writelines(answer[1])

        await message.answer_document(FSInputFile(f"search_result_{message.from_user.id}.txt"))
        unlink(f"search_result_{message.from_user.id}.txt")
        await state.clear()
        return

    elif isinstance(answer, list) and all(isinstance(p, Path) for p in answer):
        for file in answer:
            if file.exists():
                await message.answer_document(FSInputFile(file))
        fetcher.cleanup()
        await state.clear()

    else:
        await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§î")
        await state.clear()

@dp.update()
async def all_updates(update: types.Update):
    logger.log("DEBUG", update)


async def main():
    bot = Bot(config.TELEGRAM_API)
    await dp.start_polling(bot)

